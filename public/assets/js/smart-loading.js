/**
 * –£–º–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
class SmartLoadingIndicator {
    constructor() {
        this.isVisible = false;
        this.startTime = null;
        this.cacheTimeout = 300000; // 5 –º–∏–Ω—É—Ç
        this.init();
    }

    init() {
        this.createIndicator();
        this.setupPageTransitions();
        this.hideOnPageLoad();
        this.checkCacheStatus();
        
        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        
        // –°—Ä–∞–∑—É —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
            this.hide();
        }, 100);
    }

    createIndicator() {
        const indicator = document.createElement('div');
        indicator.id = 'smart-loading-indicator';
        indicator.innerHTML = `
            <div class="loading-overlay">
                <div class="loading-content">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                    </div>
                    <div class="loading-text mt-3">
                        <h5>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</h5>
                        <p class="loading-message">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
                        <div class="loading-progress">
                            <div class="progress">
                                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                     role="progressbar" style="width: 0%"></div>
                            </div>
                        </div>
                        <small class="loading-time text-muted">0.0s</small>
                        <div class="loading-cache-info mt-2">
                            <small class="text-info">üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</small>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        const style = document.createElement('style');
        style.textContent = `
            #smart-loading-indicator {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                z-index: 9999;
                display: none;
                align-items: center;
                justify-content: center;
            }
            
            .loading-overlay {
                background: white;
                border-radius: 10px;
                padding: 2rem;
                text-align: center;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                max-width: 400px;
                width: 90%;
            }
            
            .loading-content {
                display: flex;
                flex-direction: column;
                align-items: center;
            }
            
            .loading-text h5 {
                margin-bottom: 0.5rem;
                color: #333;
            }
            
            .loading-message {
                color: #666;
                margin-bottom: 1rem;
            }
            
            .loading-progress {
                width: 100%;
                margin-bottom: 0.5rem;
            }
            
            .loading-time {
                font-family: monospace;
            }
            
            .loading-cache-info {
                font-size: 0.8rem;
            }
            
            .spinner-border {
                width: 3rem;
                height: 3rem;
            }
            
            .cache-hit {
                color: #28a745 !important;
            }
            
            .cache-miss {
                color: #dc3545 !important;
            }
        `;

        document.head.appendChild(style);
        document.body.appendChild(indicator);
        
        this.element = indicator;
        this.progressBar = indicator.querySelector('.progress-bar');
        this.timeElement = indicator.querySelector('.loading-time');
        this.messageElement = indicator.querySelector('.loading-message');
        this.cacheInfoElement = indicator.querySelector('.loading-cache-info');
    }

    setupPageTransitions() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.addEventListener('click', (e) => {
            const link = e.target.closest('a');
            if (link && link.href) {
                const url = new URL(link.href);
                const path = url.pathname;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Å—ã–ª–∫–∞ –∏ –ù–ï –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
                if (path && path.startsWith('/') && !path.startsWith('#') && 
                    !link.classList.contains('dropdown-toggle') && 
                    !link.hasAttribute('data-bs-toggle')) {
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ù–ï–ú–ï–î–õ–ï–ù–ù–û
                    this.show(path);
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º, —á—Ç–æ–±—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ–ª –ø–æ–∫–∞–∑–∞—Ç—å—Å—è
                    e.preventDefault();
                    setTimeout(() => {
                        window.location.href = link.href;
                    }, 50);
                }
            }
        }, true);

        // –£–±–∏—Ä–∞–µ–º –ø–æ–∫–∞–∑ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ - —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        // window.addEventListener('popstate', () => {
        //     this.show(window.location.pathname);
        // });
    }

    show(pagePath = '') {
        if (this.isVisible) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ù–ï–ú–ï–î–õ–ï–ù–ù–û
        this.isVisible = true;
        this.startTime = Date.now();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        this.element.style.display = 'flex';
        this.element.style.opacity = '1';
        this.element.style.visibility = 'visible';
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º DOM
        this.element.offsetHeight;

        const messages = {
            '/': '–ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...',
            '/dashboard': '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...',
            '/system': '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...',
            '/processes': '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...',
            '/services': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...',
            '/packages': '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...',
            '/network/ssh': '–ó–∞–≥—Ä—É–∑–∫–∞ SSH —Ç—É–Ω–Ω–µ–ª–µ–π...',
            '/network/port-forwarding': '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª –ø—Ä–æ–±—Ä–æ—Å–∞ –ø–æ—Ä—Ç–æ–≤...',
            '/network/wireguard': '–ó–∞–≥—Ä—É–∑–∫–∞ WireGuard –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤...',
            '/network/cloudflare': '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Cloudflare API...',
            '/network/routing': '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤...',
            '/network/ipsec': '–ó–∞–≥—Ä—É–∑–∫–∞ IPSec —Ç—É–Ω–Ω–µ–ª–µ–π...',
            '/network/vpn': '–ó–∞–≥—Ä—É–∑–∫–∞ VPN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...'
        };

        this.messageElement.textContent = messages[pagePath] || '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        this.checkCacheForPage(pagePath);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        this.startProgressAnimation();
        this.updateTime();
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üöÄ –ü–æ–∫–∞–∑–∞–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è:', pagePath, '–≤—Ä–µ–º—è:', Date.now());
    }

    hide() {
        if (!this.isVisible) return;

        console.log('üõë –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        
        this.isVisible = false;
        this.stopProgressAnimation();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
        this.element.style.display = 'none';
        this.element.style.opacity = '0';
        this.element.style.visibility = 'hidden';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (this.progressBar) {
            this.progressBar.style.width = '0%';
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è
        this.startTime = null;
    }

    checkCacheForPage(pagePath) {
        const cacheKey = `page_${pagePath.replace(/\//g, '_')}`;
        const cached = localStorage.getItem(cacheKey);
        
        if (cached) {
            const cacheData = JSON.parse(cached);
            const now = Date.now();
            
            if (now - cacheData.timestamp < this.cacheTimeout) {
                // –ö—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω
                this.cacheInfoElement.innerHTML = '<small class="cache-hit">‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞</small>';
                this.cacheInfoElement.className = 'loading-cache-info mt-2 cache-hit';
            } else {
                // –ö—ç—à —É—Å—Ç–∞—Ä–µ–ª
                this.cacheInfoElement.innerHTML = '<small class="cache-miss">üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞</small>';
                this.cacheInfoElement.className = 'loading-cache-info mt-2 cache-miss';
            }
        } else {
            // –ö—ç—à–∞ –Ω–µ—Ç
            this.cacheInfoElement.innerHTML = '<small class="cache-miss">üîÑ –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞</small>';
            this.cacheInfoElement.className = 'loading-cache-info mt-2 cache-miss';
        }
    }

    checkCacheStatus() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ –≤ –∫–æ–Ω—Å–æ–ª–∏
        const cacheInfo = {
            totalItems: 0,
            totalSize: 0,
            items: {}
        };

        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith('page_')) {
                const value = localStorage.getItem(key);
                const size = new Blob([value]).size;
                
                cacheInfo.totalItems++;
                cacheInfo.totalSize += size;
                cacheInfo.items[key] = {
                    size: size,
                    sizeFormatted: this.formatBytes(size)
                };
            }
        }

        console.log('üìä –ö—ç—à —Å—Ç–∞—Ç—É—Å:', cacheInfo);
    }

    formatBytes(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    startProgressAnimation() {
        let progress = 0;
        
        // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        this.progressBar.style.width = '5%';
        
        this.progressInterval = setInterval(() => {
            // –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –≤ –Ω–∞—á–∞–ª–µ
            if (progress < 20) {
                progress += Math.random() * 20;
            } else if (progress < 50) {
                progress += Math.random() * 12;
            } else if (progress < 80) {
                progress += Math.random() * 6;
            } else {
                progress += Math.random() * 2;
            }
            
            if (progress > 90) progress = 90;
            
            this.progressBar.style.width = progress + '%';
        }, 100); // –ï—â–µ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    }

    stopProgressAnimation() {
        if (this.progressInterval) {
            clearInterval(this.progressInterval);
            this.progressInterval = null;
        }
    }

    updateTime() {
        if (!this.isVisible) return;

        const elapsed = (Date.now() - this.startTime) / 1000;
        this.timeElement.textContent = elapsed.toFixed(1) + 's';

        requestAnimationFrame(() => this.updateTime());
    }

    hideOnPageLoad() {
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => this.hide(), 100);
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('load', () => {
            // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            setTimeout(() => this.hide(), 300);
        });

        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        window.addEventListener('beforeunload', () => {
            this.hide();
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
        window.addEventListener('error', () => {
            setTimeout(() => this.hide(), 500);
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ - —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
        setTimeout(() => {
            if (this.isVisible) {
                console.log('‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
                this.hide();
            }
        }, 10000);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    static show(pagePath = '') {
        if (!window.smartLoadingIndicator) {
            window.smartLoadingIndicator = new SmartLoadingIndicator();
        }
        window.smartLoadingIndicator.show(pagePath);
    }

    static hide() {
        if (window.smartLoadingIndicator) {
            window.smartLoadingIndicator.hide();
        }
    }

    static clearCache() {
        const keysToRemove = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith('page_')) {
                keysToRemove.push(key);
            }
        }
        
        keysToRemove.forEach(key => localStorage.removeItem(key));
        console.log('üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.smartLoadingIndicator = new SmartLoadingIndicator();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.SmartLoadingIndicator = SmartLoadingIndicator;
